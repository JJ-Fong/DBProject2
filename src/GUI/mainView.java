/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Logic.DBManager;
import Logic.dateManager;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Javier Fong
 */
public class mainView extends javax.swing.JFrame {

    /**
     * Creates new form mainView
     */
    DBManager dbman; 
    String queryActual; 
    ArrayList data, title; 
    JMenuItem menuAgregar, menuEliminar, menuModificar; 
    public mainView(){}
    
    public mainView(String query) {
        initComponents();
        dbman = new DBManager();
        queryActual = query;
        this.prepTable(query); 
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/FinalAdd.png"))); // NOI18N
        jButton1.setText("Nuevo");
        jButton1.setBorderPainted(false);
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/FinalDelete.png"))); // NOI18N
        jButton2.setText("Eliminar");
        jButton2.setBorderPainted(false);
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/FinalEdit.png"))); // NOI18N
        jButton3.setText("Modificar");
        jButton3.setBorderPainted(false);
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/FinalSettings.png"))); // NOI18N
        jButton6.setText("Filtrar");
        jButton6.setBorderPainted(false);
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/FinalMoney.png"))); // NOI18N
        jButton4.setText("Agregar Venta");
        jButton4.setBorderPainted(false);
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/FinalTweet.png"))); // NOI18N
        jButton5.setText("Social Net.");
        jButton5.setBorderPainted(false);
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("Menu");

        jMenu3.setText("Configuracion");

        jMenuItem2.setText("Agregar Campo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem19.setText("Clean Sheet Protocol");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem19);

        jMenu1.add(jMenu3);

        jMenuItem1.setText("Ayuda");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");

        jMenuItem18.setText("Ver Ventas");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem18);

        jMenu4.setText("Reportes");

        jMenu5.setText("Ventas");

        jMenuItem3.setText("All Time");
        jMenuItem3.setActionCommand(">por AÃ±o");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenuItem4.setText("Anual");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem5.setText("Mensual");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem6.setText("por Pais");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenu4.add(jMenu5);

        jMenu2.add(jMenu4);

        jMenu6.setText("Graficas");

        jMenuItem7.setText("Clientes");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem7);

        jMenu2.add(jMenu6);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1335, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Filtros fil = new Filtros(queryActual); 
        fil.setVisible(true);
        this.dispose(); 
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ArrayList fields = dbman.executeQuery("SELECT * FROM fields");
        ArrayList catalogoGender = dbman.executeQuery("SELECT * FROM gender");
        String[] gender = new String[catalogoGender.size()]; 
        String[] genderId = new String[catalogoGender.size()]; 
        
        ArrayList newValues = new ArrayList(); 
        int i = 1;
        String value = ""; 
        while ((i < fields.size())&& !(value == null)){
            ArrayList field = (ArrayList) fields.get(i); 
            String fieldName = (String) field.get(0);
            String fieldType = (String) field.get(1);
            String fieldCat = (String) field.get(2);
            
            boolean accepted = false; 
            value = ""; 
            while (!accepted && !(value == null)) { 
                if (fieldName.equals("picture")) { 
                    try{
                        JFileChooser chooser = new JFileChooser();
                        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & GIF Images", "jpg", "gif");
                        chooser.setFileFilter(filter);
                        int returnVal = chooser.showOpenDialog(null);
                        chooser.setDialogTitle("Now Please Select the Client's Profile Picture");
                        if(returnVal == JFileChooser.APPROVE_OPTION) {
                            File file = chooser.getSelectedFile();
                            value = file.getAbsolutePath();
                            //System.out.println("PATHH: "+pic);
                            JOptionPane.showMessageDialog(null, "You chose this profile picture: "+chooser.getSelectedFile());
                           if (!value.toLowerCase().endsWith(".jpg")){
                               JOptionPane.showMessageDialog(null, "ERROR! Debes de escoger una imagen .jpg");
                               accepted = false; 
                           } else {
                               accepted = true; 
                           }
                        }
                    } catch (Exception ee){
                        JOptionPane.showMessageDialog(null,"Ha ocurrido un error con el ingreso de la imagen");
                    }
                } else if (fieldCat.equals("t")) {
                    String catalogName = fieldName.substring(0,fieldName.length()-3); 
                    ArrayList options = dbman.executeQuery("SELECT name FROM "+catalogName+";"); 
                    String[] name = new String[options.size()];
                    for (int j = 0; j < options.size(); j++) { 
                        ArrayList row = (ArrayList) options.get(j); 
                        name[j] = (String) row.get(0); 
                    }
                    value = (String) JOptionPane.showInputDialog(null,"Ingrese el valor de "+catalogName.toUpperCase(),catalogName.toUpperCase(),JOptionPane.QUESTION_MESSAGE,null,name,name[0]);
                    if (value != null){
                        ArrayList valueArray = (ArrayList) dbman.executeQuery("SELECT id FROM "+catalogName+" WHERE name = '"+value+"';").get(0);
                        String valueId = (String) valueArray.get(0); 
                        accepted = this.checkType(valueId, fieldType);
                        if (accepted) value = valueId; 
                    }
                } else { 
                    value = JOptionPane.showInputDialog(null,"Ingrese el valor de "+fieldName.toUpperCase(),fieldName.toUpperCase(),JOptionPane.QUESTION_MESSAGE);
                    accepted = checkType(value,fieldType);
                }
            }
            newValues.add(value); 
            if (accepted) { 
                
            }
            i++;
        }
        
        System.out.println(newValues);
    }//GEN-LAST:event_jButton1ActionPerformed
    private boolean checkType(String value, String type) { 
        boolean flag = false; 
        if (value.length() > 0) { 
            if (type.equals("integer")) { 
                try { 
                    int judge = Integer.parseInt(value); 
                    flag = true; 
                } catch (Exception e) { 
                    flag = false; 
                }
            } else if (type.equals("text")) { 
                flag = true; 
            } else if (type.equals("date")) { 
                dateManager dm = new dateManager(); 
                flag = dm.checkSintax(value); 
            } else if (type.equals("real")) {
                try { 
                    double judge = Double.parseDouble(value); 
                    flag = true;
                } catch (Exception e) {
                    flag = false; 
                }
            } 
            if (value==null) { 
                flag = false;
            }
            if (!flag) { 
                if (type.equals("date")) { 
                    JOptionPane.showConfirmDialog(null, "Invalid value, this field is "+type.toUpperCase()+" sintax: YYYY-MM-DD");
                } else {
                    JOptionPane.showConfirmDialog(null, "Wrong data type, this field is "+type.toUpperCase());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Tiene que ingresar algun valor");
        }
        return flag; 
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void delete() { 
        int row = jTable1.getSelectedRow(); 
        if (row > -1) { 
            ArrayList reg = (ArrayList) data.get(row); 
            String id = String.valueOf(reg.get(0)); 
            dbman.executeQuery("DELETE FROM client WHERE id = "+id+";");
            prepTable(queryActual); 
        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        edit(); 
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void modificar(String id) { 
        
    }
    
    public void edit() { 
        int row = jTable1.getSelectedRow(); 
        if (row > -1) { 
            ArrayList reg = (ArrayList) data.get(row); 
            String id = String.valueOf(reg.get(0)); 
            //AQUI VA ACTUALIZAR - EN ID ESTA EL ID
            modificar(id); 
        }
    }
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        String field = JOptionPane.showInputDialog(null, "Nombre del campo:");
        if (!field.equals("null")){
            String[] types = new String[] {"Entero","Real","Fecha","Texto"};   
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        // TODO add your handling code here:
        Ventas sales = new Ventas(); 
        sales.setVisible(true);
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        boolean accepted = false;
        while (!accepted) { 
            try {
                String art = JOptionPane.showInputDialog(null,"Cantidad de articulos de la venta:"); 
                int artCant = Integer.parseInt(art); 
                String total = JOptionPane.showInputDialog(null,"Valor Total de la Venta:");
                double totalCant = Double.parseDouble(total);
                String date = JOptionPane.showInputDialog(null,"Fecha de la venta:"); 
                dateManager dman = new dateManager(); 
                accepted = dman.checkSintax(date); 
                if (!accepted) { 
                    JOptionPane.showMessageDialog(null, "Fecha Invalida"); 
                }
            } catch(Exception e) { 
                JOptionPane.showMessageDialog(null, "Dato Invalido"); 
                accepted = false; 
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        // TODO add your handling code here:
        int opc = JOptionPane.showConfirmDialog(null, "Seguro que desea aplicar el CLEAN SHEET PROTOCOL?"); 
        if (opc == 0) { 
            String pw = JOptionPane.showInputDialog(null, "Ingrese contraseÃ±a:"); 
            if (pw.equals("projectmanhattan")) { 
                dbman.executeQuery("DELETE FROM client"); 
                dbman.executeQuery("DELETE FROM venta"); 
                this.prepTable(queryActual);
            }
        }
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void setReportTable(String query, String reportName) { 
        JFrame reporte = new JFrame(); 
        JTable table = new JTable(); 
        JScrollPane pane = new JScrollPane(); 
        
        
        ArrayList title = new ArrayList();
        ArrayList data = new ArrayList(); 
        try { 
            ResultSet res = dbman.executeQueryV2(query); 
            ResultSetMetaData rsmd = res.getMetaData(); 
            
            int colcount = rsmd.getColumnCount(); 
            for (int i = 0; i < colcount; i++) {
                title.add(rsmd.getColumnName(i+1)); 
            } 
            
            int j = 0; 
            while (res.next()) { 
                ArrayList row = new ArrayList(); 
                for (int i = 0; i < rsmd.getColumnCount(); i++){
                    row.add(res.getString(i+1)); 
                }
                data.add(row); 
            }
            
            
        } catch(Exception e) { 
            JOptionPane.showMessageDialog(null,"Error, por favor vuelva a intentarlo"); 
        }
        
        Object[] titleArray = new Object[title.size()];
        for (int i = 0; i < title.size(); i++) { 
            titleArray[i] = title.get(i);
        }
        
        Object[][] dataArray = new Object[data.size()][title.size()]; 
        for (int i = 0; i < data.size(); i++) { 
            ArrayList row = (ArrayList) data.get(i); 
            for (int j = 0; j < row.size(); j++) {
                dataArray[i][j] = row.get(j);
            }
        }
        
        DefaultTableModel model = new DefaultTableModel(dataArray, titleArray); 
        table.setModel(new DefaultTableModel(dataArray, titleArray));
        
        reporte.setResizable(true);
        reporte.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        reporte.setSize(700, 500);
        pane.setViewportView(table); 
        reporte.add(pane); 
        reporte.setTitle("REPORTE: "+reportName.toUpperCase());
        reporte.setVisible(true);
    }
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        this.setReportTable("SELECT * FROM ventasxano", "VENTAS POR AÃO");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        ArrayList years = dbman.executeQuery("SELECT * FROM saleyears"); 
        String[] anos = new String[years.size()]; 
        int i = 0; 
        for (Object year: years){
            ArrayList row = (ArrayList) year; 
            anos[i] = (String) row.get(0);
            i++; 
        }
        String value = (String) JOptionPane.showInputDialog(null,"De que aÃ±o desea ver reporte","",JOptionPane.QUESTION_MESSAGE,null,anos,anos[0]);
        if (!value.equals("null")) { 
            String query = "SELECT sq.month, sq.transacciones, sq.articulos, sq.totalMes, (sq.totalMes/total)*100 as porcentaje FROM (SELECT date_part('month',fecha) as month, COUNT(forreports.client_id) as transacciones, SUM(forreports.articulos) as articulos, SUM(forreports.total) as totalmes, ventasxano.total as total FROM forreports JOIN ventasxano ON date_part('year', fecha) = ventasxano.\"aÃ±o\" WHERE date_part('year',fecha) = "+value+" GROUP BY month, ventasxano.total ORDER BY month ASC) as sq;";
            this.setReportTable(query, " VENTAS POR MES DEL AÃO "+value);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        ArrayList years = dbman.executeQuery("SELECT * FROM saleyears"); 
        String[] anos = new String[years.size()]; 
        int i = 0; 
        for (Object year: years){
            ArrayList row = (ArrayList) year; 
            anos[i] = (String) row.get(0);
            i++; 
        }
        String yearValue = (String) JOptionPane.showInputDialog(null,"De que aÃ±o desea ver reporte","",JOptionPane.QUESTION_MESSAGE,null,anos,anos[0]);
        if (!yearValue.equals("null")) {
            String[] meses = new String[] {"1","2","3","4","5","6","7","8","9","10","11","12"}; 
            String monthValue = (String) JOptionPane.showInputDialog(null,"De que mes desea ver reporte","",JOptionPane.QUESTION_MESSAGE,null,meses,meses[0]);
            if (!monthValue.equals("null")) { 
                String query = "SELECT forreports.fecha, COUNT(forreports.client_id) as transacciones, SUM(forreports.articulos) as articulos, SUM(forreports.total) as totaldia FROM forreports  WHERE date_part('year',fecha) = "+yearValue+" AND date_part('month',fecha) = "+monthValue+"  GROUP BY fecha ORDER BY fecha ASC";
                this.setReportTable(query, " VENTAS POR MES DEL MES "+monthValue+" DEL AÃO "+yearValue);
            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        ArrayList years = dbman.executeQuery("SELECT * FROM saleyears"); 
        String[] anos = new String[years.size()+1]; 
        int i = 0; 
        for (Object year: years){
            ArrayList row = (ArrayList) year; 
            anos[i] = (String) row.get(0);
            i++; 
        }
        anos[i] = "Todos los aÃ±os"; 
        
        String query = "";
        String name = "";
        String yearValue = String.valueOf(JOptionPane.showInputDialog(null,"De que aÃ±o desea ver reporte","",JOptionPane.QUESTION_MESSAGE,null,anos,anos[0]));
        if (!yearValue.equals("null")) {
            if (!yearValue.equals("Todos los aÃ±os")) { 
                String[] meses = new String[] {"1","2","3","4","5","6","7","8","9","10","11","12","Todos los meses"}; 
                String monthValue = String.valueOf(JOptionPane.showInputDialog(null,"De que mes desea ver reporte","",JOptionPane.QUESTION_MESSAGE,null,meses,meses[0]));
                if (!monthValue.equals("null")) {
                    if (!monthValue.equals("Todos los meses")) { 
                        ArrayList countries = dbman.executeQuery("SELECT name FROM country"); 
                        String[] paises = new String[countries.size()+1]; 
                        i = 0; 
                        for (Object country: countries){
                            ArrayList row = (ArrayList) country; 
                            paises[i] = (String) row.get(0);
                            i++; 
                        }
                        paises[i] = "Todos los paises";
                        String countryValue = String.valueOf(JOptionPane.showInputDialog(null,"De que pais desea ver reporte","",JOptionPane.QUESTION_MESSAGE,null,paises,paises[0]));
                        if (!countryValue.equals("null")) {
                            if (!countryValue.equals("Todos los paises")) { 
                                query = "SELECT fecha, COUNT(forreports.client_id) as transacciones, SUM(forreports.articulos) as articulos, SUM(forreports.total) as total FROM forreports WHERE date_part('year',fecha) = "+yearValue+" AND date_part('month',fecha) = "+monthValue+" AND forreports.country = '"+countryValue+"' GROUP BY fecha ORDER BY fecha ASC";
                                name = " VENTAS POR PAIS EN EL AÃO "+yearValue+" EN EL MES "+monthValue;
                                this.setReportTable(query, name);
                            } else {
                                query = "SELECT forreports.country as country, COUNT(forreports.client_id) as transacciones, SUM(forreports.articulos) as articulos, SUM(forreports.total) as total FROM forreports WHERE date_part('year',fecha) = "+yearValue+" AND date_part('month',fecha) = "+monthValue+" GROUP BY country ORDER BY country ASC";
                                name = " VENTAS POR PAIS EN EL AÃO "+yearValue+" EN EL MES "+monthValue;
                                this.setReportTable(query, name);
                            }   
                        }
                    } else {
                        query = "SELECT forreports.country as country, COUNT(forreports.client_id) as transacciones, SUM(forreports.articulos) as articulos, SUM(forreports.total) as total FROM forreports WHERE date_part('year',fecha) = "+yearValue+" GROUP BY country ORDER BY year ASC";
                        name = " VENTAS POR PAIS EN EL AÃO "+yearValue;
                        this.setReportTable(query, name);
                    } 
                }
            } else {
                query = "SELECT forreports.country as country, COUNT(forreports.client_id) as transacciones, SUM(forreports.articulos) as articulos, SUM(forreports.total) as total FROM forreports GROUP BY country ORDER BY country ASC";
                name = " VENTAS POR PAIS (HISTORICO)";
                this.setReportTable(query, name);
            }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        Control c = new Control();
        c.setVisible(true);
        c.setTitle("GRÃFICAS");
    }//GEN-LAST:event_jMenuItem7ActionPerformed
    
    private void prepTable(String query) { 
        title = new ArrayList();
        data = new ArrayList(); 
        try { 
            ResultSet res = dbman.executeQueryV2(query); 
            ResultSetMetaData rsmd = res.getMetaData(); 
            
            int colcount = rsmd.getColumnCount(); 
            for (int i = 0; i < colcount; i++) {
                title.add(rsmd.getColumnName(i+1)); 
            } 
            
            int j = 0; 
            while (res.next()) { 
                ArrayList row = new ArrayList(); 
                for (int i = 0; i < rsmd.getColumnCount(); i++){
                    row.add(res.getString(i+1)); 
                }
                data.add(row); 
            }
            
            this.setTable();
        } catch(Exception e) { 
            JOptionPane.showMessageDialog(null,"Error, por favor vuelva a intentarlo"); 
        }
    }
    
    private void setTable() {
        Object[] titleArray = new Object[title.size()-1];
        for (int i = 1; i < title.size(); i++) { 
            titleArray[i-1] = title.get(i);
        }
        Object[][] dataArray = new Object[data.size()][title.size()-1]; 
        for (int i = 0; i < data.size(); i++) { 
            ArrayList row = (ArrayList) data.get(i); 
            for (int j = 1; j < row.size(); j++) {
                dataArray[i][j-1] = row.get(j);
            }
        }
        
        
        DefaultTableModel model = new DefaultTableModel(dataArray, titleArray); 
        jTable1.setModel(new DefaultTableModel(dataArray, titleArray){
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
    }
    
    public void addSale() { 
        
    }
    
    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainView().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
