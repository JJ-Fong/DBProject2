/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Logic.DBManager;
import Logic.dateManager;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Javier Fong
 */
public class Filtros extends javax.swing.JFrame {

    /**
     * Creates new form Filtros
     */
    DBManager dbman;
    String lastQuery;
    boolean ok, cancel; 
    
    ArrayList<JList> listas; 
    int currentList; 
    
    public Filtros() {
        initComponents();
        this.dbman = new DBManager();
        this.setTable();
        ok = false;
        cancel =  false;
        
        listas = new ArrayList<>(); 
        
        JList lista = new JList(); 
        listas.add(lista);
        jTabbedPane1.addTab("List "+String.valueOf(listas.size()),listas.get(0));
    }
    
    public Filtros(String query) {
        initComponents();
        this.dbman = new DBManager();
        lastQuery = query; 
        this.setTable(); 
        ok = false;
        cancel =  false; 
        listas = new ArrayList<>(); 
 
        JList lista = new JList(); 
        listas.add(lista);
        jTabbedPane1.addTab("List "+String.valueOf(listas.size()),listas.get(0));
    }
    
    private void setTable() { 
        ArrayList columns = dbman.getColumns("client"); 
        
        Object[] title = new Object[] {"Mostrar","Campo"};
        Object[][] data = new Object[columns.size()-1][2];
        for (int i = 1; i < columns.size(); i++) { 
            data[i-1][0] = false;  
            data[i-1][1] = columns.get(i); 
        }
        
        jTable2.setModel(new DefaultTableModel(data,title){
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        
            
        jTable2.getColumnModel().getColumn(0).setPreferredWidth((int) (jTable2.getWidth()*0.15));
        jTable2.getColumnModel().getColumn(1).setPreferredWidth((int) (jTable2.getWidth()*0.85));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Mostrar");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setText("Restricciones");

        jButton2.setText("Agregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Aceptar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Cancelar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton1.setText("Nueva Lista");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(58, 58, 58)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JList actualList = listas.get(jTabbedPane1.getSelectedIndex());
        ListModel oldListModel = actualList.getModel(); 
        DefaultListModel newListModel = new DefaultListModel();
        for (int i = 0; i < oldListModel.getSize(); i++) {
            newListModel.addElement(oldListModel.getElementAt(i));
        }
        ArrayList fields = dbman.executeQuery("SELECT * FROM fields");
        String[] fieldsArray = new String[fields.size()-1]; 
        for (int i = 1; i < fields.size(); i++) { 
            ArrayList field = (ArrayList) fields.get(i);
            fieldsArray[i-1] = String.valueOf(field.get(0)); 
        }
        String selectedField = String.valueOf(JOptionPane.showInputDialog(null,"Campo:","Campo a cambiar",JOptionPane.QUESTION_MESSAGE,null,fieldsArray,fieldsArray[0]));
        if (!selectedField.equals("null")){
            ArrayList field = (ArrayList) dbman.executeQuery("SELECT type FROM fields WHERE name = '"+selectedField+"';").get(0);
            String fieldType = String.valueOf(field.get(0)); 
            String[] logop = new String[] {"<","<=","=","<>",">=",">"};
            String selectedLOP = String.valueOf(JOptionPane.showInputDialog(null,"Relacion:","Relacion a evaluar",JOptionPane.QUESTION_MESSAGE,null,logop,logop[2]));
            if (!selectedLOP.equals("null")) {     
                boolean accepted = false; 
                String value = "";
                while (!accepted && (value != null)) { 
                    value = JOptionPane.showInputDialog(null, "Valor:", "Valor limite");
                    if (value != null){
                        accepted = this.checkType(value, fieldType);
                    }
                }
                if (accepted) {
                    if (fieldType.equals("text")||fieldType.equals("date")) { 
                        newListModel.addElement(selectedField+" "+selectedLOP+" '"+value+"'");
                    } else { 
                        newListModel.addElement(selectedField+" "+selectedLOP+" "+value);
                    }
                    currentList = jTabbedPane1.getSelectedIndex(); 
                    JList list = listas.get(currentList); 
                    list.setModel(newListModel);
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JList actualList = listas.get(jTabbedPane1.getSelectedIndex());
        int element = actualList.getSelectedIndex(); 
        if (element > -1) {
            ListModel oldListModel = actualList.getModel(); 
            DefaultListModel newListModel = new DefaultListModel();
            for (int i = 0; i < oldListModel.getSize(); i++) {
                newListModel.addElement(oldListModel.getElementAt(i));
            }
            newListModel.remove(element); 
            actualList.setModel(newListModel);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        ok = true; 
        this.dispose(); 
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        cancel = true; 
        this.dispose(); 
    }//GEN-LAST:event_jButton6ActionPerformed

    private String queryGenerator() {
        boolean genderAdd = false; 
        boolean countryAdd = false; 
        boolean typeAdd = false; 
        
        int tableRows = jTable2.getRowCount(); 
        String query = "SELECT client.id,";
        for (int i = 0; i < tableRows; i++) { 
            boolean selected = (boolean) jTable2.getValueAt(i,0); 
            if (selected) {
                String field = String.valueOf(jTable2.getValueAt(i,1));
                if (field.equals("gender_id")) { 
                    field = " g.name as gender";
                    genderAdd = true; 
                }
                else if (field.equals("country_id")) { 
                    field = " c.name as country";
                    countryAdd = true; 
                }
                else if (field.equals("type_id")) { 
                    field = " t.name as type";
                    typeAdd = true; 
                }
                query = query.concat(field+",");
            }
        }
        query = query.substring(0,query.length()-1);
        query = query.concat(" FROM client");
        if (genderAdd) { 
            query = query.concat(" INNER JOIN gender g ON client.gender_id = gender.id");
        }
        if (countryAdd) { 
            query = query.concat(" INNER JOIN country c ON client.country_id = country.id");
        }
        if (typeAdd) { 
            query = query.concat(" INNER JOIN type t ON client.type_id = type.id");
        }
        
        query = query.concat(" WHERE");
        boolean conditionFound = false; 
        for (int i = 0; i < listas.size(); i++) {
            query = query.concat(" ("); 
            ListModel listModel = listas.get(i).getModel(); 
            int elementsInList = listModel.getSize();
            if (elementsInList > 0) { 
                conditionFound = true; 
                for (int j = 0; j < elementsInList; j++) { 
                    query = query.concat(" "+String.valueOf(listModel.getElementAt(j))+" AND");
                }
                query = query.substring(0, query.length()-4);
            }
            
            query = query.concat(" ) OR");
        }
        query = query.substring(0, query.length()-5);
        query = query.concat(");");
        System.out.println(query);
           
        return query; 
    }
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        if (ok) { 
            String filter = queryGenerator(); 
            mainView mv = new mainView(filter);
            mv.setVisible(true);
        } else {
            mainView mv = new mainView(lastQuery);
            mv.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JList lista = new JList(); 
        listas.add(lista); 
        jTabbedPane1.add("List "+String.valueOf(listas.size()),lista); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean checkType(String value, String type) { 
        boolean flag = false; 
        
        if (type.equals("integer")) { 
            try { 
                int judge = Integer.parseInt(value); 
                flag = true; 
            } catch (Exception e) { 
                flag = false; 
            }
        } else if (type.equals("text")) { 
            flag = true; 
        } else if (type.equals("date")) { 
            dateManager dm = new dateManager(); 
            flag = dm.checkSintax(value); 
        } else if (type.equals("real")) {
            try { 
                double judge = Double.parseDouble(value); 
                flag = true;
            } catch (Exception e) {
                flag = false; 
            }
        } 
        
        if (value==null) { 
            flag = false;
        }
        
        if (!flag) { 
            if (type.equals("date")) { 
                JOptionPane.showConfirmDialog(null, "Invalid value, this field is "+type.toUpperCase()+" sintax: YYYY-MM-DD");
            } else {
                JOptionPane.showConfirmDialog(null, "Wrong data type, this field is "+type.toUpperCase());
            }
        }
        return flag; 
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Filtros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Filtros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
